<?xml-stylesheet href="/rss.xsl" type="text/xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tiany&#39;s Blog</title>
    <link>https://windytiany.github.io/</link>
    <description>Recent content on tiany&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>tiany - AS student</copyright>
    <lastBuildDate>Sat, 04 Feb 2023 19:13:40 +0800</lastBuildDate>
    
        <atom:link href="https://windytiany.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>Notes on machine learning 1</title>
        <link>https://windytiany.github.io/posts/post4/</link>
        <pubDate>Sat, 04 Feb 2023 19:13:40 +0800</pubDate>
        
        <guid>https://windytiany.github.io/posts/post4/</guid>
        <description>tiany&#39;s Blog https://windytiany.github.io/posts/post4/ -&lt;p&gt;&lt;em&gt;&lt;strong&gt;Notice: the note only contains the part 1 of the specialization.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;regression&#34;&gt;Regression&lt;/h1&gt;
&lt;h3 id=&#34;model&#34;&gt;Model&lt;/h3&gt;
&lt;p&gt;$f(\overrightarrow x)=\overrightarrow w\cdot\overrightarrow x+b=w_1x_1+w_2x_2+&amp;hellip;+w_nx_n+b$&lt;/p&gt;
&lt;h3 id=&#34;terminology&#34;&gt;Terminology&lt;/h3&gt;
&lt;p&gt;$\overrightarrow x$: features.(It can be scalar if there is only one feature)&lt;/p&gt;
&lt;p&gt;$y$: the output.(given by dataset)&lt;/p&gt;
&lt;p&gt;$m$: the number of trianing examples.&lt;/p&gt;
&lt;p&gt;n: the number of features.&lt;/p&gt;
&lt;p&gt;$x^{(i)}, y^{(i)}$: the $i$th trianing example.&lt;/p&gt;
&lt;p&gt;$f(x), \hat y$: the estimated value of y.&lt;/p&gt;
&lt;p&gt;$\overrightarrow w, b$: parameters of the model.&lt;/p&gt;
&lt;h3 id=&#34;cost-function&#34;&gt;Cost function&lt;/h3&gt;
&lt;p&gt;$J(\overrightarrow w, b) = {1\over2m}\sum_{i=1}^m(f(x^{(i)}) - y^{(i)})^2$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;compute_cost&lt;/span&gt;(X, y, w, b):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    total_cost &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(m):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        total_cost &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; (np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dot(X[i], w) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; y[i]) &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    total_cost &lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; total_cost
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;gradient-descent&#34;&gt;Gradient descent&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;calculate gradient&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;for w:&lt;/p&gt;
&lt;p&gt;${\partial J(\overrightarrow w, b)\over\partial w_j}={1\over m}\sum_{i=1}^m(f(x^{(i)})-y^{(i)})x_j^{(i)}$&lt;/p&gt;
&lt;p&gt;for b:&lt;/p&gt;
&lt;p&gt;${\partial J(\overrightarrow w, b)\over\partial b}={1\over m}\sum_{i=1}^m(f(x^{(i)})-y^{(i)})$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;update&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;$w_j=w_j-\alpha{1\over m}\sum_{i=1}^m(f(x^{(i)})-y^{(i)})x_j^{(i)}$&lt;/p&gt;
&lt;p&gt;$b=b-\alpha{1\over m}\sum_{i=1}^m(f(x^{(i)})-y^{(i)})$&lt;/p&gt;
&lt;p&gt;&lt;em&gt;($\alpha$ is learning rate chosen by yourself)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(update these parameters simultaneously)&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;calculate_gradient&lt;/span&gt;(X, y, w, b):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dj_dw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zeros(n)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dj_db &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(m):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dj_dw &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; (np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dot(X[i], w) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; y[i]) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; X[i]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dj_db &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dot(X[i], w) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; y[i]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dj_dw &lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dj_db &lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dj_dw, dj_db
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gradient_descent&lt;/span&gt;(X, y, w, b, alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.01&lt;/span&gt;, iterations&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100000&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; iterations:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dj_dw, dj_db &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; calculate_gradient(X, y, w, b)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; alpha &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; dj_dw
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; alpha &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; dj_db
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        iteration &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; w, b
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;binary-classificaiton&#34;&gt;Binary classificaiton&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;the algorithm is called logistic regression, but it has no relation with Regression problems.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;model-1&#34;&gt;Model&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;sigmoid function&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;$f(z)={1\over{1+e^{-z}}}$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;logistic regression model&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;$f(\overrightarrow x)={1\over{1+e^{-(\overrightarrow w\cdot\overrightarrow x+b)}}}$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sigmoid&lt;/span&gt;(z):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exp(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;z))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;cost-function-1&#34;&gt;Cost function&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;loss function&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;$loss=-y^{(i)}log(f(x^{(i)}))-(1-y^{(i)})log(1-f(x^{(i)}))$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;cost function&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;$J(\overrightarrow w, b)={1\over m}\sum_{i=1}^mloss$&lt;/p&gt;
&lt;p&gt;The loss function is simplified by the following formula:&lt;/p&gt;
&lt;p&gt;$$
loss=
\begin{cases}
-log(1-f(x^{(i)}))&amp;amp; when&amp;amp;y^{(i)}=0 \\
-log(f(x^{(i)}))&amp;amp; when&amp;amp;y^{(i)}=1
\end{cases}
$$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why this function?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;$when\space y^{(i)}=0,\space if\space f(x^{(i)})\rightarrow0, loss\rightarrow0$&lt;/p&gt;
&lt;p&gt;$when\space y^{(i)}=0,\space if\space f(x^{(i)})\rightarrow1, loss\rightarrow\infty$&lt;/p&gt;
&lt;p&gt;$when\space y^{(i)}=1,\space if\space f(x^{(i)})\rightarrow0, loss\rightarrow\infty$&lt;/p&gt;
&lt;p&gt;$when\space y^{(i)}=1,\space if\space f(x^{(i)})\rightarrow1, loss\rightarrow0$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;compute_cost&lt;/span&gt;(X, y, w, b):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cost &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(m):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        z_i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dot(X[i], w) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        f_i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sigmoid(z_i)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        loss &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;y[i] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log(f_i) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;y[i]) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;f_i)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cost &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; loss
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cost &lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; cost
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;gradient-descent-1&#34;&gt;Gradient descent&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;calculate gradient&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;for w:&lt;/p&gt;
&lt;p&gt;${\partial J(\overrightarrow w, b)\over\partial w_j}={1\over m}\sum_{i=1}^m(f(x^{(i)})-y^{(i)})x_j^{(i)}$&lt;/p&gt;
&lt;p&gt;for b:&lt;/p&gt;
&lt;p&gt;${\partial J(\overrightarrow w, b)\over\partial b}={1\over m}\sum_{i=1}^m(f(x^{(i)})-y^{(i)})$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;update&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;$w_j=w_j-\alpha{1\over m}\sum_{i=1}^m(f(x^{(i)})-y^{(i)})x_j^{(i)}$&lt;/p&gt;
&lt;p&gt;$b=b-\alpha{1\over m}\sum_{i=1}^m(f(x^{(i)})-y^{(i)})$&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(alpha is learning rate chosen by yourself)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(update these parameters simultaneously)&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;calculate_gradient&lt;/span&gt;(X, y, w, b):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dj_dw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zeros(n)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dj_db &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(m):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        z_i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dot(X[i], w) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        f_i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sigmoid(z_i)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dj_dw &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; (f_i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; y[i]) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; X[i]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dj_db &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; f_i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; y[i]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dj_dw &lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dj_db &lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dj_dw, dj_db
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gradient_descent&lt;/span&gt;(X, y, w, b, alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.01&lt;/span&gt;, iterations&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100000&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; iterations:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dj_dw, dj_db &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; calculate_gradient(X, y, w, b)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; alpha &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; dj_dw
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; alpha &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; dj_db
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        iteration &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; w, b
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;improvement&#34;&gt;Improvement&lt;/h1&gt;
&lt;h3 id=&#34;feature-scaling&#34;&gt;Feature Scaling&lt;/h3&gt;
&lt;p&gt;This method is to reduce the range of features so the algorithm can be implemented efficiently.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Way 1:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;$x_j = {x_j\over{max(x_j)}}$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Way 2: Mean normalization&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;$x_j={x_j-\mu_j\over{max(x_j)-min(x_j)}}$&lt;/p&gt;
&lt;p&gt;($\mu_j$ is the mean of all $x_j$)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Way 3: Z-score normalization&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;$x_j={x_j-\mu_j\over\sigma_j}$&lt;/p&gt;
&lt;p&gt;($\sigma_j$ is standard deviation)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Z-score normalization&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Z_score_normalization&lt;/span&gt;(X):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mu &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(X, axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sigma &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;std(X, axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    X &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (X &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; mu) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; sigma
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; X
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;feature-engineering&#34;&gt;Feature Engineering&lt;/h3&gt;
&lt;p&gt;This method can be used in polynomial regression. For example, you can create a new feature which is equal to square of the original features. Then, you can take this feature and run gradient descent. At last, you may get a non-linear model.&lt;/p&gt;
&lt;h3 id=&#34;regularization&#34;&gt;Regularization&lt;/h3&gt;
&lt;p&gt;This method is to solve the problem of overfitting.&lt;/p&gt;
&lt;h5 id=&#34;regression-1&#34;&gt;Regression&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;regularized cost function&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;$J(\overrightarrow w, b)={1\over2m}\sum_{i=1}^m(f(x^{(i)}) - y^{(i)})^2+{\lambda\over2m}\sum_{j=1}^nw_j^2$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;regularized gradient&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;for w:&lt;/p&gt;
&lt;p&gt;${\partial J(\overrightarrow w, b)\over\partial w_j}={1\over m}\sum_{i=1}^m(f(x^{(i)})-y^{(i)})x_j^{(i)}+{\lambda\over m}w_j$&lt;/p&gt;
&lt;p&gt;for b:(there is no change)&lt;/p&gt;
&lt;p&gt;${\partial J(\overrightarrow w, b)\over\partial b}={1\over m}\sum_{i=1}^m(f(x^{(i)})-y^{(i)})$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;compute_regularized_cost&lt;/span&gt;(X, y, w, b, _lambda&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    total_cost &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(m):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        total_cost &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; (np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dot(X[i], w) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; y[i]) &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    total_cost &lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    total_cost &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; _lambda &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dot(w, w) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; total_cost
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;compute_regularized_gradient&lt;/span&gt;(X, y, w, b, _lambda&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dj_dw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zeros(n)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dj_db &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(m):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dj_dw &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; (np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dot(X[i], w) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; y[i]) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; X[i]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dj_db &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dot(X[i], w) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; y[i]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dj_dw &lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dj_db &lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dj_dw &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; _lambda &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dj_dw, dj_db
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;binary-classification&#34;&gt;Binary Classification&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;regularized cost function&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;$J(\overrightarrow w, b)={1\over m}\sum_{i=1}^m[-y^{(i)}log(f(x^{(i)}))-(1-y^{(i)})log(1-f(x^{(i)}))]+{\lambda\over2m}\sum_{j=1}^nw_j^2$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;regularized gradient&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;for w:&lt;/p&gt;
&lt;p&gt;${\partial J(\overrightarrow w, b)\over\partial w_j}={1\over m}\sum_{i=1}^m(f(x^{(i)})-y^{(i)})x_j^{(i)}+{\lambda\over m}w_j$&lt;/p&gt;
&lt;p&gt;for b:(there is no change)&lt;/p&gt;
&lt;p&gt;${\partial J(\overrightarrow w, b)\over\partial b}={1\over m}\sum_{i=1}^m(f(x^{(i)})-y^{(i)})$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;compute_regularized_cost&lt;/span&gt;(X, y, w, b, _lambda&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    total_cost &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(m):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        err_i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dot(X[i], w) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        f_i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sigmoid(z_i)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        loss &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;y[i] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log(f_i) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;y[i]) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;f_i)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        total_cost &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; loss
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    total_cost &lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    total_cost &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; _lambda &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dot(w, w) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; total_cost
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;compute_regularized_gradient&lt;/span&gt;(X, y, w, b, _lambda&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dj_dw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zeros(n)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dj_db &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(m):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        err_i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dot(X[i], w) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        f_i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sigmoid(z_i)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dj_dw &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; (f_i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; y[i]) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; X[i]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dj_db &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; f_i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; y[i]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dj_dw &lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dj_db &lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dj_dw &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; _lambda &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dj_dw, dj_db
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;use-scikit-learn&#34;&gt;Use scikit-learn&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sklearn.linear_model &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; LinearRegression, SGDRegressor, LogisticRegression
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sklearn.preprocessing &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; StandardScaler
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#create Linear Regression model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;linear_model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; LinearRegression()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#X must be a 2-D Matrix to fit the model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;linear_model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fit(X_train&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reshape(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), y_train) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#view parameters&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; linear_model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;intercept_
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; linear_model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;coef_
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#make prediction&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;y_pred &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; linear_model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;predict(X_train&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reshape(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#---------------------------------------------------------------------&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#feature scaling(Z-score normalization)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scaler &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StandardScaler()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;X_norm &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; scaler&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fit_transform(X_train)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#create and fit a gradient descent regression model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sgdr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; SGDRegressor(max_iter&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sgdr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fit(X_norm, y_train)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#view parameters&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;b_norm &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sgdr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;intercept_
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;w_norm &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sgdr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;coef_
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#make prediction&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;y_pred_sgd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sgdr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;predict(X_norm)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#---------------------------------------------------------------------&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#create and fit a Logistic Regression model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lr_model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; LogisticRegression()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lr_model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fit(X, y)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#make prediction&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;y_pred &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lr_model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;predict(X)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#calculate accuracy&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(lr_model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;score(X, y))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://windytiany.github.io/posts/post4/ - tiany - AS student</description>
        </item>
    
    
    
        <item>
        <title>LaTeX Math Formula</title>
        <link>https://windytiany.github.io/posts/post3/</link>
        <pubDate>Sat, 04 Feb 2023 12:43:33 +0800</pubDate>
        
        <guid>https://windytiany.github.io/posts/post3/</guid>
        <description>tiany&#39;s Blog https://windytiany.github.io/posts/post3/ -&lt;h3 id=&#34;1-greek-alphabetpart&#34;&gt;1 Greek alphabet(Part)&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;display&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;syntax&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\alpha$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\alpha&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\beta$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\beta&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\gamma$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\gamma&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\delta$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\delta&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\epsilon$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\epsilon&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\zeta$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\zeta&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\eta$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\eta&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\theta$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\theta&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\lambda$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\lambda&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\mu$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\mu&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\pi$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\pi&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\sigma$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\sigma&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\phi$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\phi&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\psi$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\psi&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;2-math-syntax&#34;&gt;2 Math syntax&lt;/h3&gt;
&lt;p&gt;$$
a \times b  \\
a \div b  \\
a \pm b  \\
a \mp b  \\
a \cdot b  \\
a \oplus b  \\
a \otimes b  \\
a \ominus b  \\
\infty  \\
\sqrt{x}  \\
\sqrt[n]{x}  \\
\emptyset  \\
\in  \\
\not\in  \\
\ni  \\
\not\ni  \\
\cap  \\
\cup  \\
\subset  \\
\supset  \\
\subseteq  \\
\supseteq  \\
\nsubseteq  \\
\nsupseteq  \\
a \ne b  \\
a \approx b  \\
a \le b  \\
a \ge b  \\
a \leqslant b  \\
a \geqslant b  \\
$$&lt;/p&gt;
- https://windytiany.github.io/posts/post3/ - tiany - AS student</description>
        </item>
    
    
    
        <item>
        <title>IELTS test result</title>
        <link>https://windytiany.github.io/posts/post2/</link>
        <pubDate>Wed, 01 Feb 2023 12:43:33 +0800</pubDate>
        
        <guid>https://windytiany.github.io/posts/post2/</guid>
        <description>tiany&#39;s Blog https://windytiany.github.io/posts/post2/ -&lt;h3 id=&#34;pictures2023-02-01-12-45-04-imagepng&#34;&gt;&lt;img src=&#34;../../pictures/2023-02-01-12-45-04-image.png&#34; alt=&#34;&#34;&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;../../pictures/5005094550d3fd96613ae89dd4ab6a6b14d2625a.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
- https://windytiany.github.io/posts/post2/ - tiany - AS student</description>
        </item>
    
    
    
        <item>
        <title>Build your blog by Hugo &#43; Github Pages</title>
        <link>https://windytiany.github.io/posts/post1/</link>
        <pubDate>Tue, 31 Jan 2023 13:05:13 +0800</pubDate>
        
        <guid>https://windytiany.github.io/posts/post1/</guid>
        <description>tiany&#39;s Blog https://windytiany.github.io/posts/post1/ -&lt;h3 id=&#34;0-foreword&#34;&gt;0 Foreword&lt;/h3&gt;
&lt;p&gt;This is my first blog and I want to record the process I build this blog site on Windows.&lt;/p&gt;
&lt;h3 id=&#34;1-prerequisites&#34;&gt;1 Prerequisites&lt;/h3&gt;
&lt;p&gt;First, you need to download/install the following:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://go.dev/doc/install&#34;&gt;Go&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/gohugoio/hugo&#34;&gt;Hugo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Please add them to &lt;em&gt;environment variables&lt;/em&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can check using the following commands:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go version
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git version
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo version
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-build-your-site&#34;&gt;2 Build your site&lt;/h3&gt;
&lt;h5 id=&#34;21-generate-folder&#34;&gt;2.1 generate folder&lt;/h5&gt;
&lt;p&gt;Run the following command:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;hugo new site my_blog
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It would generate a folder named &lt;em&gt;my_blog&lt;/em&gt; in current directory and the following are the functions of these files/folders:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;config.toml&lt;/em&gt; : the configuration file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;content&lt;/em&gt; : stores all the content of the website, including all of your blog posts, resumes and so on, can include folders, but usually all &lt;code&gt;.md&lt;/code&gt; files.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;static&lt;/em&gt; : stores static files such as your background pictures, logos, css, js, etc. The files in this directory will be directly copied to it &lt;code&gt;/public&lt;/code&gt;. This folder has higher priority than the &lt;code&gt;/static&lt;/code&gt;folder under the theme.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;themes&lt;/em&gt; : stores all the themes downloaded and you can choose the theme by editing config file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;archetypes&lt;/em&gt; : stored &lt;code&gt;.md&lt;/code&gt;template files, it has higher priority than &lt;code&gt;/archetypes&lt;/code&gt;folders under the theme.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;data : stores data files for template calls.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;layouts&lt;/em&gt; : store &lt;code&gt;.html&lt;/code&gt;templates, this folder has higher priority than &lt;code&gt;/layouts&lt;/code&gt;folders under the theme.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;public&lt;/em&gt; : After executing the &lt;code&gt;hugo&lt;/code&gt;command, store the generated static file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;22-download-and-use-theme&#34;&gt;2.2 download and use theme&lt;/h5&gt;
&lt;p&gt;You can go to &lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;this site&lt;/a&gt; to find themes. My blog uses &lt;em&gt;diary&lt;/em&gt; so I&amp;rsquo;ll take it as an example.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd my_blog
cd themes
git clone https://github.com/AmazingRise/hugo-theme-diary
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;These commands would download the theme into &lt;em&gt;themes&lt;/em&gt; folder. To use it, you can open &lt;em&gt;config.toml&lt;/em&gt;, and add:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;theme = &amp;#39;diary&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Save it, and run:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;hugo server
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Open &lt;a href=&#34;http://127.0.0.1:1313&#34;&gt;http://127.0.0.1:1313&lt;/a&gt;, you can see that the theme is used.&lt;/p&gt;
&lt;h5 id=&#34;23-write-an-article&#34;&gt;2.3 write an article&lt;/h5&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd my_blog
hugo new posts/post1.md
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It would generate a file called &lt;em&gt;post1.md&lt;/em&gt;. Open it, set &lt;em&gt;draft&lt;/em&gt; to be false. Below that, you can write your article using &lt;em&gt;Markdown&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Save it and run the server, you can see your article now!&lt;/p&gt;
&lt;h3 id=&#34;3-deploy-your-site-on-github-pages&#34;&gt;3 Deploy your site on Github Pages&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Firstly, you should register a &lt;em&gt;github&lt;/em&gt; account.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open your home page, click &amp;ldquo;+&amp;rdquo;, and then click &amp;ldquo;new repository&amp;rdquo;. The name should be like &amp;ldquo;&lt;em&gt;username&lt;/em&gt;.github.io&amp;rdquo;, then click &amp;ldquo;create repository&amp;rdquo;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd my_blog
hugo
cd public 
git init
git add .
git remote add origin https://github.com/username/username.github.io.git
git commit -m &amp;#34;first commit&amp;#34;
git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;    These commands would build your site and send them to github.&lt;/p&gt;
&lt;p&gt;    4. Open your repository, click &amp;ldquo;settings&amp;rdquo;, open &amp;ldquo;Pages&amp;rdquo;, click the link and that&amp;rsquo;s your website!&lt;/p&gt;
&lt;p&gt;If you want to update your blog, run the following commands:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd my_blog
hugo
cd public 
git init
git add .
git commit -m &amp;#34;update&amp;#34;
git push origin master
&lt;/code&gt;&lt;/pre&gt;- https://windytiany.github.io/posts/post1/ - tiany - AS student</description>
        </item>
    
    
  </channel>
</rss> 