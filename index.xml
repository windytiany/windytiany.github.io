<?xml-stylesheet href="/rss.xsl" type="text/xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tiany&#39;s Blog</title>
    <link>https://windytiany.github.io/</link>
    <description>Recent content on tiany&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>tiany - AS student</copyright>
    <lastBuildDate>Tue, 02 May 2023 17:27:23 +0800</lastBuildDate>
    
        <atom:link href="https://windytiany.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>CS Review[Finetuned]</title>
        <link>https://windytiany.github.io/posts/cs-review-finetuned/</link>
        <pubDate>Tue, 02 May 2023 17:27:23 +0800</pubDate>
        
        <guid>https://windytiany.github.io/posts/cs-review-finetuned/</guid>
        <description>tiany&#39;s Blog https://windytiany.github.io/posts/cs-review-finetuned/ -&lt;h1 id=&#34;charpter-1&#34;&gt;Charpter 1&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Show understanding of binary magnitudes and the difference between binary prefixes and decimal prefixes&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;img src=&#34;../../pictures/2023-05-04-15-44-50-image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;img src=&#34;../../pictures/2023-05-04-15-45-15-image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Show understanding of the basis of different number systems&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use the binary, denary, hexadecimal number bases and Binary Coded Decimal (BCD) and one’s and two’s complement representation for binary numbers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Convert an integer value from one number base / representation to another&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Two’s complement&lt;/strong&gt; – each binary digit is reversed and 1 is added in right-most position to produce another method of representing positive and negative numbers.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Perform binary addition and subtraction&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;substrction&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;change the number into two&amp;rsquo;s complement&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;implement binary addition&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;overflow: there is not enough bits to represent the number.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Describe practical applications where Binary Coded Decimal (BCD) and Hexadecimal are used&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The most obvious use of BCD is in the representation of digits on a calculator
or clock display.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each denary digit will have a BCD equivalent value which makes it easy to
convert from computer output to denary display.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Show understanding of and be able to represent character data in its internal binary form, depending on the character set used&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;charpter-6&#34;&gt;Charpter 6&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Explain the difference between the terms security, privacy and integrity of data&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Data stored about a person or an organisation must remain private and unauthorised access to the data must be prevented – data privacy is required.(prevent unauthorised access)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data security refers to the methods used to prevent unauthorised access to data, as well as to the data recovery methods if it is lost.(prevent data loss)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data integrity – the accuracy, completeness and consistency of data.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Show appreciation of the need for both the security of data and the security of the computer system&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(None)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Describe security measures designed to protect computer systems, ranging from the stand-alone PC to a network of computers&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User accounts
&lt;ul&gt;
&lt;li&gt;User accounts are used to authenticate a user。&lt;/li&gt;
&lt;li&gt;User accounts are used on both standalone and networked computers in case the computer can be accessed by a number of people.&lt;/li&gt;
&lt;li&gt;User accounts control access rights. This often involves levels of access.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Password
&lt;ul&gt;
&lt;li&gt;Passwords are used to restrict access to data or systems.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Digital signatures
&lt;ul&gt;
&lt;li&gt;Digital signatures protect data by providing a way of identifying the sender.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;firewalls
&lt;ul&gt;
&lt;li&gt;A firewall can be software or hardware. It sits between the user’s computer and an external network (such as the internet) and filters information in and out of the computer.&lt;/li&gt;
&lt;li&gt;tasks carried out by firewalls to protect the data
&lt;ul&gt;
&lt;li&gt;examining the traffic between the user’s computer (or internal network) and a public network (such as the internet)&lt;/li&gt;
&lt;li&gt;checking whether incoming or outgoing data meets a given set of criteria&lt;/li&gt;
&lt;li&gt;blocking the traffic if the data fails to meet the criteria, and giving the user(or network manager) a warning that there may be a security issue&lt;/li&gt;
&lt;li&gt;logging all incoming and outgoing traffic to allow later interrogation by the user (or network manager)&lt;/li&gt;
&lt;li&gt;preventing access to certain undesirable sites – the firewall can keep a list of all undesirable IP addresses&lt;/li&gt;
&lt;li&gt;helping to prevent viruses or hackers entering the user’s computer (or internal network)&lt;/li&gt;
&lt;li&gt;warning the user if some software on their system is trying to access an external data source (such as an automatic software upgrade). The user is given the option of allowing it to go ahead or request that such access is denied.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Antivirus software
&lt;ul&gt;
&lt;li&gt;Running antivirus software in the background on a computer will constantly check for virus attacks.&lt;/li&gt;
&lt;li&gt;features:
&lt;ul&gt;
&lt;li&gt;check software or files before they are run or loaded on a computer&lt;/li&gt;
&lt;li&gt;compare possible viruses against a database of known viruses&lt;/li&gt;
&lt;li&gt;carry out heuristic checking (check software for behaviour that could indicate a virus, which is useful if software is infected by a virus not yet on the database)&lt;/li&gt;
&lt;li&gt;quarantine files or programs which are possibly infected and
– allow the virus to be automatically deleted, or
– allow the user to make the decision about deletion (it is possible that
the user knows that the file or program is not infected by a virus – this
is known as a false positive and is one of the drawbacks of antivirus
software).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Anti-spyware software
&lt;ul&gt;
&lt;li&gt;Anti-spyware software detects and removes spyware programs installed
illegally on a user’s computer system.&lt;/li&gt;
&lt;li&gt;The software is either based on rules(it looks for typical features associated with spyware) or based on known file structures which can identify common spyware programs.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Encryption
&lt;ul&gt;
&lt;li&gt;If data on a computer has been accessed illegally (by a hacker, for example) it is possible to encrypt the data, making it virtually impossible to understand without encryption keys to decode it. This cannot stop a hacker from deleting the files, but it will stop them using the data for themselves.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Biometrics
&lt;ul&gt;
&lt;li&gt;many modern computer devices use biometrics as part of the password system.&lt;/li&gt;
&lt;li&gt;Fingerprint scans: Images of fingerprints are compared against previously scanned fingerprints stored in a database; if they match then access is allowed.&lt;/li&gt;
&lt;li&gt;Retina scans: Retina scans use infra-red to scan the unique pattern of blood vessels in the retina(at the back of the eye).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Show understanding of the threats to computer and data security posed by networks and the internet&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;hacking&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Malicious hacking is the illegal access to a computer system without the user’s permission or knowledge.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ethical hacking is authorised by companies to check their security measures and how robust their computer systems are to resist hacking attacks.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;malware&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Viruses: Programs or program code that can replicate and/or copy themselves with the intention of deleting or corrupting files or causing the computer to malfunction.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spyware: Software that gathers information by monitoring, for example, key presses on the user’s keyboard.The information is then sent back to the person who sent the software – sometimes referred to as key logging software.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;phishing&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Phishing is when someone sends legitimate-looking emails to users.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;They may contain links or attachments which, when clicked, take the user to a fake website, or they may trick the user into responding with personal data such as bank account details or credit card numbers.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pharming&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pharming is malicious code installed on a user’s computer or on a web server.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The code re-directs the user to a fake website without their knowledge (the user does not have to take any action, unlike phishing). The creator of the malicious code can gain personal data such as bank details from users.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Describe methods that can be used to restrict the risks posed by threats&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;virus&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;anti-virus software/firewall&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;hacker&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;firewall/strong password&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;spyware&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;firewall/anti-spyware&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Describe security methods designed to protect the security of data&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;access rights&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;encryption&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Describe how data validation and data verification help protect the integrity of data&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Validation is a method of checking if entered data is reasonable (and within a given criteria), but it cannot check if data is correct or accurate.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Verification is a way of preventing errors. (check weather the data is the same as the original)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Describe and use methods of data validation&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;../../pictures/2023-05-02-21-15-35-image.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Describe and use methods of data verification during data entry and data transfer&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Verification during data entry&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Double entry: Data is entered twice and the computer would compare them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Visual check: Entered data is manully compared with the original document.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check digits: The check digit is an additional digit added to a number. The check digit can catch errors when an incorrect digit being entered, a transposition error where two numbers have been swapped, digits being omitted or added, or phonetic errors.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Verification during data transfer&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Checksums&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A checksum is a method to check if data has been changed or corrupted following data transmission. Data is sent in blocks and an additional value, the checksum, is sent at the end of the block of data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When a block of data is about to be transmitted, the checksum for the bytes is first calculated. This value is transmitted with the block of data. At the receiving end, the checksum is re-calculated from the block of data received. This calculated value is compared to the checksum transmitted. If they are the same, then the data was transmitted without any errors; if they are different, then a request is sent for the data to be re-transmitted.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Parity checks&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A parity check is another method to check whether data has been changed or corrupted following transmission from one device or medium to another.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A byte of data, for example, is allocated a parity bit. This is allocated before transmission. Systems that use even parity have an even number of 1-bits; systems that use odd parity have an odd number of 1-bits.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If this byte is using even parity, then the parity bit needs to be 0 since there is already an even number of 1-bits (in this case, four). If odd parity is being used, then the parity bit needs to be 1 to make the number of 1-bits odd.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The error is detected by the computer re-calculating the parity of the byte sent.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Naturally, any of the bits in the above example could have been changed leading to a transmission error. Therefore, even though an error has been flagged, it is impossible to know exactly which bit is in error.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;One of the ways around this problem is to use parity blocks. In this method, a block of data is sent and the number of 1-bits are totalled horizontally and vertically.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;charpter-7&#34;&gt;Charpter 7&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Show understanding of the need for and purpose of ethics as a computing professional&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;benefits of join a professional ethical body: &lt;img src=&#34;../../pictures/2023-05-03-21-16-41-image.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Show understanding of the need to act ethically and the impact of acting ethically or unethically for a given situation&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(None)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Show understanding of the need for copyright legislation&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;definition of copyright: &lt;img src=&#34;../../pictures/2023-05-03-21-58-43-image.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Show understanding of the different types of software licencing and justify the use of a licence for a given situation&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;commercial license&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;img src=&#34;../../pictures/2023-05-03-22-08-11-image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Commercial software is available to customers for a fee, providing a licence
for one genuine copy to be used on a single device, or a multi-use licence for multiple users. Occasionally, software is offered free of charge if an earlier version was bought by the user. This type of software is fully copyright-protected and none of the code can be used without the prior consent of the copyright owner.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;open source license&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;img src=&#34;../../pictures/2023-05-03-22-09-38-image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;free distribution, provide source code, allow derived works, integrity of the author&amp;rsquo;s source code, No Discrimination Against Persons or Groups, No Discrimination Against Fields of Endeavor, Distribution of License, License Must Not Be Specific to a Product, License Must Not Restrict Other Software, License Must Be Technology-Neutral&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;shareware&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Shareware allows users to try out some software free of charge for a trial period.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Show understanding of Artificial Intelligence (AI)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;benefits&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;img src=&#34;../../pictures/2023-05-03-22-21-35-image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;img src=&#34;../../pictures/2023-05-03-22-22-20-image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;application&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;../../pictures/2023-05-03-22-20-45-image.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;charpter-8&#34;&gt;Charpter 8&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Show understanding of the limitations of using a file-based approach for the storage and retrieval of data&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;../../pictures/2023-05-03-22-26-08-image.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Describe the features of a relational database that address the limitations of a file-based approach&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;../../pictures/2023-05-03-22-45-53-image.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Show understanding of and use the terminology associated with a relational database model&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A &lt;em&gt;&lt;strong&gt;&lt;!-- raw HTML omitted --&gt;table&lt;!-- raw HTML omitted --&gt;&lt;/strong&gt;&lt;/em&gt; is a group of similar data, in a database, with rows for each instance of an entity and columns for each attribute.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;em&gt;&lt;strong&gt;&lt;!-- raw HTML omitted --&gt;record/tuple/entity&lt;!-- raw HTML omitted --&gt;&lt;/strong&gt;&lt;/em&gt; is a row in a table in a database.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;em&gt;&lt;strong&gt;&lt;!-- raw HTML omitted --&gt;field/attribute&lt;!-- raw HTML omitted --&gt;&lt;/strong&gt;&lt;/em&gt; is a column in a table in a database.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;img src=&#34;../../pictures/2023-05-03-22-35-09-image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;img src=&#34;../../pictures/2023-05-03-22-35-33-image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Referential integrity – property of a database that does not contain any values of a foreign key that are not matched to the corresponding primary key.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Index (database) – a data structure built from one or more columns in a database table to speed up searching for data.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Use an entity-relationship (E-R) diagram to document a database design&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;img src=&#34;../../pictures/2023-05-03-22-35-33-image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;img src=&#34;../../pictures/2023-05-03-22-37-38-image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Show understanding of the normalisation process&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;../../pictures/2023-05-03-22-38-31-image.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Explain why a given set of database tables are, or are not, in 3NF&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Produce a normalised database design for a description of a database, a given set of data, or a given set of tables&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Show understanding of the features provided by a Database Management System (DBMS) that address the issues of a file based approach&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A DBMS uses a &lt;strong&gt;&lt;!-- raw HTML omitted --&gt;data dictionary&lt;!-- raw HTML omitted --&gt;&lt;/strong&gt; to store the metadata, including the definition
of tables, attributes, relationships between tables and any indexing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;!-- raw HTML omitted --&gt;Data modelling&lt;!-- raw HTML omitted --&gt;&lt;/strong&gt; is an important tool used to show the data structure of a
database.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;strong&gt;&lt;!-- raw HTML omitted --&gt;logical schema&lt;!-- raw HTML omitted --&gt;&lt;/strong&gt; is a data model for a specific database that is independent of the DBMS used to build the database.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;img src=&#34;../../pictures/2023-05-04-14-38-49-image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The data dictionary can also define the validation rules used for the entry of data and contain data about the physical storage of the data. The use of a data
dictionary improves the &lt;strong&gt;&lt;!-- raw HTML omitted --&gt;integrity&lt;!-- raw HTML omitted --&gt;&lt;/strong&gt; of the data stored, helping to ensure that it is accurate, complete and consistent.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Show understanding of how software tools found within a DBMS are used in practice&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;developer interface&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The developer interface allows a developer to write queries in structured query language (SQL) rather than using query-by-example.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;query processor&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The query processor takes a query written in SQL and processes it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The query processor includes a DDL interpreter, a DML compiler and a query evaluation engine.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Show understanding that DBMS carries out all creation / modification of the database structure using its Data Definition Language (DDL)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DBMSs use a data definition language (DDL) to create, modify and remove the
data structures that form a relational database.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Show understanding that the DBMS carries out all queries and maintenance of data using its DML&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DBMSs use a data manipulation language (DML) to add, modify, delete and
retrieve the data stored in a relational database.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Show understanding that the industry standard for both DDL and DML is Structured Query Language (SQL)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Understand a given SQL script&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Understand given SQL (DDL) commands and be able to write simple SQL (DDL) commands using a sub-set of commands&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;img src=&#34;../../pictures/2023-05-04-16-23-49-image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;img src=&#34;../../pictures/2023-05-04-15-30-37-image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Write an SQL script to query or modify data (DML) which are stored in (at most two) database tables&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;img src=&#34;../../pictures/2023-05-04-16-24-11-image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;img src=&#34;../../pictures/2023-05-04-15-22-22-image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://windytiany.github.io/posts/cs-review-finetuned/ - tiany - AS student</description>
        </item>
    
    
    
        <item>
        <title>Notes on machine learning 2</title>
        <link>https://windytiany.github.io/posts/post5/</link>
        <pubDate>Fri, 10 Feb 2023 18:55:03 +0800</pubDate>
        
        <guid>https://windytiany.github.io/posts/post5/</guid>
        <description>tiany&#39;s Blog https://windytiany.github.io/posts/post5/ -&lt;h1 id=&#34;diagram-of-a-neural-network-model&#34;&gt;Diagram of a neural network model&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;../../pictures/2023-02-10-19-09-08-image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;implement-a-neural-network&#34;&gt;Implement a neural network&lt;/h1&gt;
&lt;p&gt;Libraries:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tensorflow &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; tf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; tensorflow.keras.models &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Sequential
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; tensorflow.keras.layers &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Dense
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; tensorflow.keras.activations &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; relu, linear, sigmoid, softmax
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; tensorflow.keras.losses &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; SparseCategoricalCrossentropy, BinaryCrossentropy
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; tensorflow.keras.optimizers &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Adam
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;create-a-layer&#34;&gt;Create a layer&lt;/h3&gt;
&lt;p&gt;TensorFlow:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Dense(units&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;, activation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;DIY:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;my_dense_layer&lt;/span&gt;(a_in, W, b, g):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    a_in: input
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    W: parameters
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    b: parameters
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    g: activation function
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    units &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; W&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shape[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#75715e&#34;&gt;# number of neurons in this layer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a_out &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zeros(units)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    z &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a_in &lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt; W &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b &lt;span style=&#34;color:#75715e&#34;&gt;# @, np.matmul() matrix multiplication&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a_out &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; g(z)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a_out
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;activation-functions&#34;&gt;Activation functions&lt;/h3&gt;
&lt;p&gt;$z=\overrightarrow w\cdot\overrightarrow a+b$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Linear&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;$g(z)=z$&lt;/p&gt;
&lt;p&gt;It can also be considered as no activation function.&lt;/p&gt;
&lt;p&gt;You can use it in the output layer when there is a regression problem and the output can be negative.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ReLU&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;$g(z)=max(0,z)$&lt;/p&gt;
&lt;p&gt;It is reconmanded to be the default choice for hidden layers. It can also be used in the output layer when there is a regression problem and the output is non-negative.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;sigmoid&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;$g(z)={1\over{1+e^{-z}}}$&lt;/p&gt;
&lt;p&gt;It can be used in the output layer when there is a binary classification problem.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;softmax&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;$a_j={e^{z_j}\over{\sum_{i=1}^ne^{z_i}}}$&lt;/p&gt;
&lt;p&gt;It is used in the output layer when there is a multi-classes classification problem.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;my_softmax&lt;/span&gt;(z):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ez &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exp(z)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a_out &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ez &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; sum(ez)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a_out
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;create-your-model&#34;&gt;Create your model&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sequential(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Dense(units&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;, activation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;relu&amp;#39;&lt;/span&gt;, name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;layer1&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Dense(units&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, activation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;relu&amp;#39;&lt;/span&gt;, name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;layer2&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Dense(units&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, activation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sigmoid&amp;#39;&lt;/span&gt;, name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;output&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;], name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;my_model&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;summary() &lt;span style=&#34;color:#75715e&#34;&gt;#check your model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;train-your-model&#34;&gt;Train your model&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;compile(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    loss&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;BinaryCrossentropy(), &lt;span style=&#34;color:#75715e&#34;&gt;#choose loss function&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    optimizer&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Adam(learning_rate&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.01&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# choose optimizer algorithm&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fit(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    X, y, &lt;span style=&#34;color:#75715e&#34;&gt;#your training set&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    epochs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# iterate how many times&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# get parameters&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;W1, b1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_layer(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;layer1&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_weights()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# make prediction&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;predict(x_pred)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;BinaryCrossentropy()&lt;/code&gt;is the loss function for binary classification. As I mentioned in the previous post, the formula is:&lt;/p&gt;
&lt;p&gt;$loss=-y^{(i)}log(f(x^{(i)}))-(1-y^{(i)})log(1-f(x^{(i)}))$&lt;/p&gt;
&lt;p&gt;There is another loss function called &lt;code&gt;SparseCategoricalCrossentropy()&lt;/code&gt; which is used for multi-classes classification (of course it can be used in binary classification).&lt;/p&gt;
&lt;h3 id=&#34;a-better-way-to-train-model&#34;&gt;A better way to train model&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sequential(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Dense(units&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;, activation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;relu&amp;#39;&lt;/span&gt;, name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;layer1&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Dense(units&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, activation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;relu&amp;#39;&lt;/span&gt;, name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;layer2&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Dense(units&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, activation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;linear&amp;#39;&lt;/span&gt;, name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;output&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;### notice change&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;], name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;my_model&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;compile(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    loss&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;SparseCategoricalCrossentropy(from_logits&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;), &lt;span style=&#34;color:#75715e&#34;&gt;### notice change &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    optimizer&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Adam(learning_rate&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.01&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fit(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    X, y,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    epochs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;y_pred &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;predict(x_pred)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# notice that the value here is actually `z` so you need one additional step to compute `g(z)`.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;y_result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;softmax(y_pred)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#print which category each example belongs to&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argmax(y_result))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Use this way can make the result of calculation has higher accuracy.&lt;/p&gt;
&lt;h3 id=&#34;use-regularization&#34;&gt;Use regularization&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Dense(units&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt;, activation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;relu&amp;#39;&lt;/span&gt;, kernel_regularizer&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keras&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;regularizers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;l2(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;kernel_regularizer=tf.keras.regularizers.l2(0.1)&lt;/code&gt;can help you use regularization when training neural network and 0.1 is the value of lambda.&lt;/p&gt;
&lt;h1 id=&#34;decision-tree&#34;&gt;Decision Tree&lt;/h1&gt;
&lt;h3 id=&#34;entropy&#34;&gt;Entropy&lt;/h3&gt;
&lt;p&gt;$H(p)=-p*log_2(p)-(1-p)*log_2(1-p)$&lt;/p&gt;
&lt;p&gt;This function is used to measure the impurity of the examples.&lt;/p&gt;
&lt;p&gt;Here, $p={{the\space number \space of \space examples\space that\space have\space this\space feature}\over{total number of examples}}$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;compute_entropy&lt;/span&gt;(y):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y[y&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(y) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        p &lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt; len(y)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log2(p) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;p) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log2(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;p) 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;split-dataset&#34;&gt;Split dataset&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;split_dataset&lt;/span&gt;(X, node_indices, feature):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    left_indices &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    right_indices &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; node_indices:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; X[i][feature] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            left_indices&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(i)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            right_indices&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(i)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; left_indices, right_indices
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;information-gain&#34;&gt;Information gain&lt;/h3&gt;
&lt;p&gt;$Information\space gain=H(p_{root})-(w_{left}H(p_{left})+w_{right}H(p_{right}))$&lt;/p&gt;
&lt;p&gt;Here,&lt;/p&gt;
&lt;p&gt;$w_{left}={{the\space number\space of\space examples\space that\space are\space on\space the\space left}\over{the\space total\space number\space of\space examples}}$&lt;/p&gt;
&lt;p&gt;$w_{right}={{the\space number\space of\space examples\space that\space are\space on\space the\space right}\over{the\space total\space number\space of\space examples}}$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;compute_information_gain&lt;/span&gt;(X, y, node_indices, feature):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    left_indices, right_indices &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; split_dataset(node_indices)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    w_left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(left_indices) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; len(node_indices)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    w_right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(right_indices) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; len(node_indices)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    h_node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; compute_entropy(y[node_indices])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    h_left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; compute_entropy(y[left_indices])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    h_right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; compute_entropy(y[right_indices])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; h_node &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; (w_left &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; h_left &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; w_right &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; h_right)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://windytiany.github.io/posts/post5/ - tiany - AS student</description>
        </item>
    
    
    
        <item>
        <title>Resources</title>
        <link>https://windytiany.github.io/resources/</link>
        <pubDate>Mon, 06 Feb 2023 16:09:59 +0800</pubDate>
        
        <guid>https://windytiany.github.io/resources/</guid>
        <description>tiany&#39;s Blog https://windytiany.github.io/resources/ -&lt;h3 id=&#34;anime&#34;&gt;Anime&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.dm530p.net/&#34;&gt;https://www.dm530p.net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.zzzfun.com/&#34;&gt;http://www.zzzfun.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.mcdm8.com/&#34;&gt;https://www.mcdm8.com/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;manga&#34;&gt;Manga&lt;/h3&gt;
&lt;p&gt;(None)&lt;/p&gt;
&lt;h3 id=&#34;light-novel&#34;&gt;Light Novel&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.lightnovel.us/&#34;&gt;https://www.lightnovel.us/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;game&#34;&gt;Game&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://lzacg.one/&#34;&gt;https://lzacg.one/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://steamunlocked.net/&#34;&gt;https://steamunlocked.net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://steamrip.com/&#34;&gt;https://steamrip.com/&lt;/a&gt;&lt;/p&gt;
- https://windytiany.github.io/resources/ - tiany - AS student</description>
        </item>
    
    
    
        <item>
        <title>Notes on machine learning 1</title>
        <link>https://windytiany.github.io/posts/post4/</link>
        <pubDate>Sat, 04 Feb 2023 19:13:40 +0800</pubDate>
        
        <guid>https://windytiany.github.io/posts/post4/</guid>
        <description>tiany&#39;s Blog https://windytiany.github.io/posts/post4/ -&lt;p&gt;&lt;em&gt;&lt;strong&gt;Notice: the note only contains the part 1 of the specialization.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;regression&#34;&gt;Regression&lt;/h1&gt;
&lt;h3 id=&#34;model&#34;&gt;Model&lt;/h3&gt;
&lt;p&gt;$f(\overrightarrow x)=\overrightarrow w\cdot\overrightarrow x+b=w_1x_1+w_2x_2+&amp;hellip;+w_nx_n+b$&lt;/p&gt;
&lt;h3 id=&#34;terminology&#34;&gt;Terminology&lt;/h3&gt;
&lt;p&gt;$\overrightarrow x$: features.(It can be scalar if there is only one feature)&lt;/p&gt;
&lt;p&gt;$y$: the output.(given by dataset)&lt;/p&gt;
&lt;p&gt;$m$: the number of trianing examples.&lt;/p&gt;
&lt;p&gt;n: the number of features.&lt;/p&gt;
&lt;p&gt;$x^{(i)}, y^{(i)}$: the $i$th trianing example.&lt;/p&gt;
&lt;p&gt;$f(x), \hat y$: the estimated value of y.&lt;/p&gt;
&lt;p&gt;$\overrightarrow w, b$: parameters of the model.&lt;/p&gt;
&lt;h3 id=&#34;cost-function&#34;&gt;Cost function&lt;/h3&gt;
&lt;p&gt;$J(\overrightarrow w, b) = {1\over2m}\sum_{i=1}^m(f(x^{(i)}) - y^{(i)})^2$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;compute_cost&lt;/span&gt;(X, y, w, b):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    total_cost &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(m):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        total_cost &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; (np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dot(X[i], w) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; y[i]) &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    total_cost &lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; total_cost
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;gradient-descent&#34;&gt;Gradient descent&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;calculate gradient&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;for w:&lt;/p&gt;
&lt;p&gt;${\partial J(\overrightarrow w, b)\over\partial w_j}={1\over m}\sum_{i=1}^m(f(x^{(i)})-y^{(i)})x_j^{(i)}$&lt;/p&gt;
&lt;p&gt;for b:&lt;/p&gt;
&lt;p&gt;${\partial J(\overrightarrow w, b)\over\partial b}={1\over m}\sum_{i=1}^m(f(x^{(i)})-y^{(i)})$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;update&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;$w_j=w_j-\alpha{1\over m}\sum_{i=1}^m(f(x^{(i)})-y^{(i)})x_j^{(i)}$&lt;/p&gt;
&lt;p&gt;$b=b-\alpha{1\over m}\sum_{i=1}^m(f(x^{(i)})-y^{(i)})$&lt;/p&gt;
&lt;p&gt;&lt;em&gt;($\alpha$ is learning rate chosen by yourself)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(update these parameters simultaneously)&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;calculate_gradient&lt;/span&gt;(X, y, w, b):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dj_dw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zeros(n)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dj_db &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(m):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dj_dw &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; (np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dot(X[i], w) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; y[i]) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; X[i]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dj_db &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dot(X[i], w) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; y[i]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dj_dw &lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dj_db &lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dj_dw, dj_db
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gradient_descent&lt;/span&gt;(X, y, w, b, alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.01&lt;/span&gt;, iterations&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100000&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; iterations:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dj_dw, dj_db &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; calculate_gradient(X, y, w, b)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; alpha &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; dj_dw
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; alpha &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; dj_db
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        iteration &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; w, b
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;binary-classificaiton&#34;&gt;Binary classificaiton&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;the algorithm is called logistic regression, but it has no relation with Regression problems.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;model-1&#34;&gt;Model&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;sigmoid function&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;$f(z)={1\over{1+e^{-z}}}$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;logistic regression model&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;$f(\overrightarrow x)={1\over{1+e^{-(\overrightarrow w\cdot\overrightarrow x+b)}}}$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sigmoid&lt;/span&gt;(z):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exp(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;z))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;cost-function-1&#34;&gt;Cost function&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;loss function&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;$loss=-y^{(i)}log(f(x^{(i)}))-(1-y^{(i)})log(1-f(x^{(i)}))$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;cost function&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;$J(\overrightarrow w, b)={1\over m}\sum_{i=1}^mloss$&lt;/p&gt;
&lt;p&gt;The loss function is simplified by the following formula:&lt;/p&gt;
&lt;p&gt;$$
loss=
\begin{cases}
-log(1-f(x^{(i)}))&amp;amp; when&amp;amp;y^{(i)}=0 \\
-log(f(x^{(i)}))&amp;amp; when&amp;amp;y^{(i)}=1
\end{cases}
$$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why this function?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;$when\space y^{(i)}=0,\space if\space f(x^{(i)})\rightarrow0, loss\rightarrow0$&lt;/p&gt;
&lt;p&gt;$when\space y^{(i)}=0,\space if\space f(x^{(i)})\rightarrow1, loss\rightarrow\infty$&lt;/p&gt;
&lt;p&gt;$when\space y^{(i)}=1,\space if\space f(x^{(i)})\rightarrow0, loss\rightarrow\infty$&lt;/p&gt;
&lt;p&gt;$when\space y^{(i)}=1,\space if\space f(x^{(i)})\rightarrow1, loss\rightarrow0$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;compute_cost&lt;/span&gt;(X, y, w, b):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cost &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(m):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        z_i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dot(X[i], w) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        f_i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sigmoid(z_i)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        loss &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;y[i] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log(f_i) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;y[i]) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;f_i)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cost &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; loss
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cost &lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; cost
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;gradient-descent-1&#34;&gt;Gradient descent&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;calculate gradient&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;for w:&lt;/p&gt;
&lt;p&gt;${\partial J(\overrightarrow w, b)\over\partial w_j}={1\over m}\sum_{i=1}^m(f(x^{(i)})-y^{(i)})x_j^{(i)}$&lt;/p&gt;
&lt;p&gt;for b:&lt;/p&gt;
&lt;p&gt;${\partial J(\overrightarrow w, b)\over\partial b}={1\over m}\sum_{i=1}^m(f(x^{(i)})-y^{(i)})$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;update&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;$w_j=w_j-\alpha{1\over m}\sum_{i=1}^m(f(x^{(i)})-y^{(i)})x_j^{(i)}$&lt;/p&gt;
&lt;p&gt;$b=b-\alpha{1\over m}\sum_{i=1}^m(f(x^{(i)})-y^{(i)})$&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(alpha is learning rate chosen by yourself)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(update these parameters simultaneously)&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;calculate_gradient&lt;/span&gt;(X, y, w, b):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dj_dw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zeros(n)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dj_db &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(m):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        z_i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dot(X[i], w) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        f_i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sigmoid(z_i)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dj_dw &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; (f_i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; y[i]) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; X[i]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dj_db &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; f_i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; y[i]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dj_dw &lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dj_db &lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dj_dw, dj_db
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gradient_descent&lt;/span&gt;(X, y, w, b, alpha&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.01&lt;/span&gt;, iterations&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100000&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; iterations:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dj_dw, dj_db &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; calculate_gradient(X, y, w, b)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; alpha &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; dj_dw
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; alpha &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; dj_db
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        iteration &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; w, b
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;improvement&#34;&gt;Improvement&lt;/h1&gt;
&lt;h3 id=&#34;feature-scaling&#34;&gt;Feature Scaling&lt;/h3&gt;
&lt;p&gt;This method is to reduce the range of features so the algorithm can be implemented efficiently.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Way 1:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;$x_j = {x_j\over{max(x_j)}}$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Way 2: Mean normalization&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;$x_j={x_j-\mu_j\over{max(x_j)-min(x_j)}}$&lt;/p&gt;
&lt;p&gt;($\mu_j$ is the mean of all $x_j$)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Way 3: Z-score normalization&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;$x_j={x_j-\mu_j\over\sigma_j}$&lt;/p&gt;
&lt;p&gt;($\sigma_j$ is standard deviation)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Z-score normalization&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Z_score_normalization&lt;/span&gt;(X):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mu &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(X, axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sigma &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;std(X, axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    X &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (X &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; mu) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; sigma
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; X
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;feature-engineering&#34;&gt;Feature Engineering&lt;/h3&gt;
&lt;p&gt;This method can be used in polynomial regression. For example, you can create a new feature which is equal to square of the original features. Then, you can take this feature and run gradient descent. At last, you may get a non-linear model.&lt;/p&gt;
&lt;h3 id=&#34;regularization&#34;&gt;Regularization&lt;/h3&gt;
&lt;p&gt;This method is to solve the problem of overfitting.&lt;/p&gt;
&lt;h5 id=&#34;regression-1&#34;&gt;Regression&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;regularized cost function&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;$J(\overrightarrow w, b)={1\over2m}\sum_{i=1}^m(f(x^{(i)}) - y^{(i)})^2+{\lambda\over2m}\sum_{j=1}^nw_j^2$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;regularized gradient&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;for w:&lt;/p&gt;
&lt;p&gt;${\partial J(\overrightarrow w, b)\over\partial w_j}={1\over m}\sum_{i=1}^m(f(x^{(i)})-y^{(i)})x_j^{(i)}+{\lambda\over m}w_j$&lt;/p&gt;
&lt;p&gt;for b:(there is no change)&lt;/p&gt;
&lt;p&gt;${\partial J(\overrightarrow w, b)\over\partial b}={1\over m}\sum_{i=1}^m(f(x^{(i)})-y^{(i)})$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;compute_regularized_cost&lt;/span&gt;(X, y, w, b, _lambda&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    total_cost &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(m):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        total_cost &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; (np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dot(X[i], w) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; y[i]) &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    total_cost &lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    total_cost &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; _lambda &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dot(w, w) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; total_cost
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;compute_regularized_gradient&lt;/span&gt;(X, y, w, b, _lambda&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dj_dw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zeros(n)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dj_db &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(m):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dj_dw &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; (np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dot(X[i], w) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; y[i]) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; X[i]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dj_db &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dot(X[i], w) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; y[i]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dj_dw &lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dj_db &lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dj_dw &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; _lambda &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dj_dw, dj_db
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;binary-classification&#34;&gt;Binary Classification&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;regularized cost function&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;$J(\overrightarrow w, b)={1\over m}\sum_{i=1}^m[-y^{(i)}log(f(x^{(i)}))-(1-y^{(i)})log(1-f(x^{(i)}))]+{\lambda\over2m}\sum_{j=1}^nw_j^2$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;regularized gradient&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;for w:&lt;/p&gt;
&lt;p&gt;${\partial J(\overrightarrow w, b)\over\partial w_j}={1\over m}\sum_{i=1}^m(f(x^{(i)})-y^{(i)})x_j^{(i)}+{\lambda\over m}w_j$&lt;/p&gt;
&lt;p&gt;for b:(there is no change)&lt;/p&gt;
&lt;p&gt;${\partial J(\overrightarrow w, b)\over\partial b}={1\over m}\sum_{i=1}^m(f(x^{(i)})-y^{(i)})$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;compute_regularized_cost&lt;/span&gt;(X, y, w, b, _lambda&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    total_cost &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(m):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        err_i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dot(X[i], w) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        f_i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sigmoid(z_i)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        loss &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;y[i] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log(f_i) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;y[i]) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;f_i)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        total_cost &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; loss
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    total_cost &lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    total_cost &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; _lambda &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dot(w, w) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; total_cost
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;compute_regularized_gradient&lt;/span&gt;(X, y, w, b, _lambda&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dj_dw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zeros(n)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dj_db &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(m):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        err_i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dot(X[i], w) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        f_i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sigmoid(z_i)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dj_dw &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; (f_i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; y[i]) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; X[i]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dj_db &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; f_i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; y[i]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dj_dw &lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dj_db &lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dj_dw &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; _lambda &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; w &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; dj_dw, dj_db
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;use-scikit-learn&#34;&gt;Use scikit-learn&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sklearn.linear_model &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; LinearRegression, SGDRegressor, LogisticRegression
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sklearn.preprocessing &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; StandardScaler
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#create Linear Regression model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;linear_model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; LinearRegression()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#X must be a 2-D Matrix to fit the model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;linear_model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fit(X_train&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reshape(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), y_train) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#view parameters&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; linear_model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;intercept_
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;w &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; linear_model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;coef_
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#make prediction&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;y_pred &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; linear_model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;predict(X_train&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reshape(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#---------------------------------------------------------------------&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#feature scaling(Z-score normalization)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scaler &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StandardScaler()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;X_norm &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; scaler&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fit_transform(X_train)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#create and fit a gradient descent regression model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sgdr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; SGDRegressor(max_iter&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sgdr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fit(X_norm, y_train)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#view parameters&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;b_norm &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sgdr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;intercept_
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;w_norm &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sgdr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;coef_
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#make prediction&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;y_pred_sgd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sgdr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;predict(X_norm)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#---------------------------------------------------------------------&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#create and fit a Logistic Regression model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lr_model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; LogisticRegression()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lr_model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fit(X, y)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#make prediction&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;y_pred &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lr_model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;predict(X)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#calculate accuracy&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(lr_model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;score(X, y))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://windytiany.github.io/posts/post4/ - tiany - AS student</description>
        </item>
    
    
    
        <item>
        <title>LaTeX Math Formula</title>
        <link>https://windytiany.github.io/posts/post3/</link>
        <pubDate>Sat, 04 Feb 2023 12:43:33 +0800</pubDate>
        
        <guid>https://windytiany.github.io/posts/post3/</guid>
        <description>tiany&#39;s Blog https://windytiany.github.io/posts/post3/ -&lt;h3 id=&#34;1-greek-alphabetpart&#34;&gt;1 Greek alphabet(Part)&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;display&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;syntax&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\alpha$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\alpha&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\beta$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\beta&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\gamma$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\gamma&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\delta$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\delta&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\epsilon$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\epsilon&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\zeta$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\zeta&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\eta$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\eta&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\theta$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\theta&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\lambda$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\lambda&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\mu$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\mu&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\pi$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\pi&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\sigma$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\sigma&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\phi$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\phi&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;2-math-syntax&#34;&gt;2 Math syntax&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;display&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;syntax&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\times&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\div$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\div&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\pm$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\pm&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\mp$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\mp&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\cdot$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\cdot&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\oplus$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\oplus&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\otimes$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\otimes&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\infty$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\infty&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\sqrt{x}$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\sqrt{x}&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\sqrt[n]{x}$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\sqrt[n]{x}&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\emptyset$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\emptyset&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\in$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\in&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\not\in$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\not\in&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\ni$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\ni&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\not\ni$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\not\ni&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\cap$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\cap&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\cup$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\cup&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\subset$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\subset&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\supset$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\supset&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\subseteq$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\subseteq&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\supseteq$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\supseteq&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\nsubseteq$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\nsubseteq&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\nsupseteq$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\nsupseteq&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\ne$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\ne&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\approx$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\approx&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\le$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\le&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\ge$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\ge&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\leqslant$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\leqslant&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\geqslant$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\geqslant&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\overrightarrow{AB}$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\overrightarrow{AB}&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\sum_{i=1}^n$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\sum_{i=1}^n&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\partial t$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\partial t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\int_a^b$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\int_a^b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;$$&lt;/p&gt;
&lt;p&gt;$$&lt;/p&gt;
- https://windytiany.github.io/posts/post3/ - tiany - AS student</description>
        </item>
    
    
    
        <item>
        <title>IELTS test result</title>
        <link>https://windytiany.github.io/posts/post2/</link>
        <pubDate>Wed, 01 Feb 2023 12:43:33 +0800</pubDate>
        
        <guid>https://windytiany.github.io/posts/post2/</guid>
        <description>tiany&#39;s Blog https://windytiany.github.io/posts/post2/ -&lt;h3 id=&#34;pictures2023-02-01-12-45-04-imagepng&#34;&gt;&lt;img src=&#34;../../pictures/2023-02-01-12-45-04-image.png&#34; alt=&#34;&#34;&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;../../pictures/5005094550d3fd96613ae89dd4ab6a6b14d2625a.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
- https://windytiany.github.io/posts/post2/ - tiany - AS student</description>
        </item>
    
    
    
        <item>
        <title>Build your blog by Hugo &#43; Github Pages</title>
        <link>https://windytiany.github.io/posts/post1/</link>
        <pubDate>Tue, 31 Jan 2023 13:05:13 +0800</pubDate>
        
        <guid>https://windytiany.github.io/posts/post1/</guid>
        <description>tiany&#39;s Blog https://windytiany.github.io/posts/post1/ -&lt;h3 id=&#34;0-foreword&#34;&gt;0 Foreword&lt;/h3&gt;
&lt;p&gt;This is my first blog and I want to record the process I build this blog site on Windows.&lt;/p&gt;
&lt;h3 id=&#34;1-prerequisites&#34;&gt;1 Prerequisites&lt;/h3&gt;
&lt;p&gt;First, you need to download/install the following:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://go.dev/doc/install&#34;&gt;Go&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/gohugoio/hugo&#34;&gt;Hugo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Please add them to &lt;em&gt;environment variables&lt;/em&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can check using the following commands:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go version
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git version
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo version
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-build-your-site&#34;&gt;2 Build your site&lt;/h3&gt;
&lt;h5 id=&#34;21-generate-folder&#34;&gt;2.1 generate folder&lt;/h5&gt;
&lt;p&gt;Run the following command:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;hugo new site my_blog
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It would generate a folder named &lt;em&gt;my_blog&lt;/em&gt; in current directory and the following are the functions of these files/folders:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;config.toml&lt;/em&gt; : the configuration file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;content&lt;/em&gt; : stores all the content of the website, including all of your blog posts, resumes and so on, can include folders, but usually all &lt;code&gt;.md&lt;/code&gt; files.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;static&lt;/em&gt; : stores static files such as your background pictures, logos, css, js, etc. The files in this directory will be directly copied to it &lt;code&gt;/public&lt;/code&gt;. This folder has higher priority than the &lt;code&gt;/static&lt;/code&gt;folder under the theme.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;themes&lt;/em&gt; : stores all the themes downloaded and you can choose the theme by editing config file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;archetypes&lt;/em&gt; : stored &lt;code&gt;.md&lt;/code&gt;template files, it has higher priority than &lt;code&gt;/archetypes&lt;/code&gt;folders under the theme.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;data : stores data files for template calls.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;layouts&lt;/em&gt; : store &lt;code&gt;.html&lt;/code&gt;templates, this folder has higher priority than &lt;code&gt;/layouts&lt;/code&gt;folders under the theme.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;public&lt;/em&gt; : After executing the &lt;code&gt;hugo&lt;/code&gt;command, store the generated static file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;22-download-and-use-theme&#34;&gt;2.2 download and use theme&lt;/h5&gt;
&lt;p&gt;You can go to &lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;this site&lt;/a&gt; to find themes. My blog uses &lt;em&gt;diary&lt;/em&gt; so I&amp;rsquo;ll take it as an example.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd my_blog
cd themes
git clone https://github.com/AmazingRise/hugo-theme-diary
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;These commands would download the theme into &lt;em&gt;themes&lt;/em&gt; folder. To use it, you can open &lt;em&gt;config.toml&lt;/em&gt;, and add:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;theme = &amp;#39;diary&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Save it, and run:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;hugo server
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Open &lt;a href=&#34;http://127.0.0.1:1313&#34;&gt;http://127.0.0.1:1313&lt;/a&gt;, you can see that the theme is used.&lt;/p&gt;
&lt;h5 id=&#34;23-write-an-article&#34;&gt;2.3 write an article&lt;/h5&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd my_blog
hugo new posts/post1.md
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It would generate a file called &lt;em&gt;post1.md&lt;/em&gt;. Open it, set &lt;em&gt;draft&lt;/em&gt; to be false. Below that, you can write your article using &lt;em&gt;Markdown&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Save it and run the server, you can see your article now!&lt;/p&gt;
&lt;h3 id=&#34;3-deploy-your-site-on-github-pages&#34;&gt;3 Deploy your site on Github Pages&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Firstly, you should register a &lt;em&gt;github&lt;/em&gt; account.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open your home page, click &amp;ldquo;+&amp;rdquo;, and then click &amp;ldquo;new repository&amp;rdquo;. The name should be like &amp;ldquo;&lt;em&gt;username&lt;/em&gt;.github.io&amp;rdquo;, then click &amp;ldquo;create repository&amp;rdquo;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd my_blog
hugo
cd public 
git init
git add .
git remote add origin https://github.com/username/username.github.io.git
git commit -m &amp;#34;first commit&amp;#34;
git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;    These commands would build your site and send them to github.&lt;/p&gt;
&lt;p&gt;    4. Open your repository, click &amp;ldquo;settings&amp;rdquo;, open &amp;ldquo;Pages&amp;rdquo;, click the link and that&amp;rsquo;s your website!&lt;/p&gt;
&lt;p&gt;If you want to update your blog, run the following commands:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd my_blog
hugo
cd public 
git init
git add .
git commit -m &amp;#34;update&amp;#34;
git push origin master
&lt;/code&gt;&lt;/pre&gt;- https://windytiany.github.io/posts/post1/ - tiany - AS student</description>
        </item>
    
    
  </channel>
</rss> 